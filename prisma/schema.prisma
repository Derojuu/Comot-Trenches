generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String        @id @default(cuid())
  userRole         UserRole
  clerkUserId      String        @unique
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  consumer         Consumer?
  organizations    Organization?
  teamMember       TeamMember?

  @@map("users")
}

model Consumer {
  id                  String              @id @default(cuid())
  userId              String              @unique
  fullName            String
  dateOfBirth         DateTime?
  phoneNumber         String?
  address             String?
  country             String?             // currenly no in the consmer register form
  state               String?             // currenly no in the consmer register form
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  counterfeit_reports CounterfeitReport[]
  scanHistory         ScanHistory[]

  @@map("consumers")
}

model Organization {
  id                String              @id @default(cuid())
  adminId           String              @unique
  organizationType  OrganizationType
  companyName       String
  contactEmail      String
  contactPhone      String?
  contactPersonName String?
  address           String
  country           String
  state             String?
  rcNumber          String?
  nafdacNumber      String?
  businessRegNumber String?
  licenseNumber     String?
  pcnNumber         String?
  agencyName        String?
  officialId        String?
  distributorType   String?
  isVerified        Boolean             @default(false)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  medicationBatches MedicationBatch[]
  users             User                @relation(fields: [adminId], references: [id], onDelete: Cascade)
  transfersFrom     OwnershipTransfer[] @relation("TransferFrom")
  transfersTo       OwnershipTransfer[] @relation("TransferTo")
  teamMembers       TeamMember[]

  @@map("organizations")
}

model TeamMember {
  id             String       @id @default(cuid())
  userId         String       @unique
  organizationId String
  isAdmin        Boolean
  name           String
  email          String
  role           String
  department     String
  joinDate       DateTime     @default(now())
  lastActive     DateTime     @default(now())
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_members")
}

model MedicationBatch {
  id                  String              @id @default(cuid())
  batchId             String              @unique
  organizationId      String
  drugName            String
  composition         String?
  batchSize           Int
  manufacturingDate   DateTime
  expiryDate          DateTime
  storageInstructions String?
  currentLocation     String?
  status              BatchStatus         @default(MANUFACTURING)
  qrCodeData          String?
  blockchainHash      String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  counterfeitReports  CounterfeitReport[]
  organization        Organization        @relation(fields: [organizationId], references: [id])
  ownershipTransfers  OwnershipTransfer[]
  scanHistory         ScanHistory[]
  medicationUnits     MedicationUnit[]

  @@map("medication_batches")
}

model MedicationUnit {
  id              String      @id @default(cuid()) // Primary key
  batchId         String                         // FK to MedicationBatch
  serialNumber    String      @unique            // Unique identifier per unit
  qrCode          String?                        // Optional QR code for scanning
  currentLocation String?                        // Where the unit currently is
  status          UnitStatus  @default(IN_STOCK) // Enum for tracking unit state
  blockchainHash  String?                        // Optional for blockchain verification
  createdAt       DateTime    @default(now())    // Auto set on creation
  updatedAt       DateTime    @updatedAt         // Auto updated on changes

  // Relation back to MedicationBatch
  batch           MedicationBatch @relation(fields: [batchId], references: [id])

  @@map("medication_units")
}

model OwnershipTransfer {
  id             String          @id @default(cuid())
  batchId        String
  fromOrgId      String
  toOrgId        String
  transferDate   DateTime        @default(now())
  status         TransferStatus  @default(PENDING)
  blockchainHash String?
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  batch          MedicationBatch @relation(fields: [batchId], references: [id])
  fromOrg        Organization    @relation("TransferFrom", fields: [fromOrgId], references: [id])
  toOrg          Organization    @relation("TransferTo", fields: [toOrgId], references: [id])

  @@map("ownership_transfers")
}

model ScanHistory {
  id           String          @id @default(cuid())
  batchId      String
  consumerId   String?
  scanLocation String?
  scanDate     DateTime        @default(now())
  scanResult   ScanResult
  ipAddress    String?
  deviceInfo   String?
  latitude     Float?
  longitude    Float?
  createdAt    DateTime        @default(now())
  batch        MedicationBatch @relation(fields: [batchId], references: [id])
  consumer     Consumer?       @relation(fields: [consumerId], references: [id])

  @@map("scan_history")
}

model CounterfeitReport {
  id             String           @id @default(cuid())
  batchId        String?
  reporterId     String
  reportType     ReportType
  severity       SeverityLevel
  description    String
  location       String?
  evidence       String[]
  status         ReportStatus     @default(PENDING)
  investigatorId String?
  resolution     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  batch          MedicationBatch? @relation(fields: [batchId], references: [id])
  consumers      Consumer         @relation(fields: [reporterId], references: [id])

  @@map("counterfeit_reports")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@map("audit_logs")
}

enum UserRole {
  ORGANIZATION_MEMBER
  CONSUMER
  SUPER_ADMIN
}

enum OrganizationType {
  MANUFACTURER
  DRUG_DISTRIBUTOR
  HOSPITAL
  PHARMACY
  REGULATOR
}

enum BatchStatus {
  MANUFACTURING
  READY_FOR_DISPATCH
  IN_TRANSIT
  DELIVERED
  RECALLED
  EXPIRED
}

enum UnitStatus {
  IN_STOCK
  DISPATCHED
  SOLD
  RETURNED
  LOST
}

enum TransferStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum ScanResult {
  GENUINE
  COUNTERFEIT
  SUSPICIOUS
  NOT_FOUND
  EXPIRED
}

enum ReportType {
  COUNTERFEIT_DETECTED
  PACKAGING_ISSUE
  EXPIRY_MISMATCH
  MULTIPLE_SCANS
  SUSPICIOUS_ACTIVITY
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
  ESCALATED
}
